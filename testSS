#!/usr/bin/python

import os
import sys
import time
import getopt

import pynoccio

progname = os.path.basename(sys.argv[0])

def printUsage(msg):
    if not msg == '':
        print msg
    print "usage: %s [options] user password" % (progname)
    print "options:"
    print
    print "  -t <troop> troup name"
    print "  -s <scout> scout name"
    print "  -v level   set pynoccio debug level"

def main():
    try:
        options, argv = getopt.getopt(sys.argv[1:], "t:s:v:")
    except getopt.GetoptError:
        printUsage('Error parsing arguments')
        sys.exit(1)

    if len(argv) < 2:
        printUsage("")
        sys.exit(1)

    troop_name = "Rancho de la Basura Blanco"
    scout_name = "Billy"

    debug_level = None

    for o,a in options:
        if o == "-t":
            troop_name = a
        elif o == "-s":
            scout_name = a
        elif o == "-v":
            debug_level = int(a)
        else:
            printUsage("Unrecognised option - \"%s\"" % (o))
            sys.exit(1)

    if debug_level is not None:
	pynoccio.set_debug(debug_level)
    a = pynoccio.Account(argv[0], argv[1])
    #print "account:", a.account, a.token
    #print a.account()

    for t in a.troops:
        print "troop:", t
        for s in t.scouts:
            print "\tscout:", s

    scout = a.troop(troop_name).scout(scout_name)

    def execSS(cmd):
	r = eval(cmd, globals(), locals())
	print >>sys.stderr, r.reply

    print >>sys.stderr, 'talking to scout named', scout.name
    if 1:
	print >>sys.stderr, scout.banner.reply
    if 1:
	print >>sys.stderr, scout.power.ischarging.reply
	print >>sys.stderr, scout.power.percent.reply
	print >>sys.stderr, scout.power.voltage.reply
	#print >>sys.stderr, "isleasscout", type(scout.scout.isleadscout.reply), scout.scout.isleadscout.reply
	if not scout.scout.report.reply.lead:
	    print >>sys.stderr, scout.power.enablevcc.reply
	    print >>sys.stderr, scout.power.disablevcc.reply
	print >>sys.stderr, scout.power.sleep(1000).reply
	print >>sys.stderr, scout.power.report.reply
    if 1:
	#print >>sys.stderr, scout.mesh.config(mesh.config(scoutId, troopId, channel=20).reply
	#print >>sys.stderr, scout.mesh.setpower(1).reply
	#print >>sys.stderr, scout.mesh.setdatarate(0).reply
	#print >>sys.stderr, scout.mesh.key("TestSecutityKey1").reply
	#print >>sys.stderr, scout.mesh.setkey("TestSecutityKey1").reply
	print >>sys.stderr, scout.mesh.resetkey.reply
	#print >>sys.stderr, scout.mesh.getkey.reply
	print >>sys.stderr, scout.mesh.joingroup(10).reply
	print >>sys.stderr, scout.mesh.leavegroup(20).reply
	print >>sys.stderr, scout.mesh.ingroup(10).reply
	print >>sys.stderr, scout.mesh.send(1, 'hello').reply
	print >>sys.stderr, scout.mesh.verbose(1).reply
	print >>sys.stderr, scout.mesh.report.reply
	print >>sys.stderr, scout.mesh.routing.reply
	print >>sys.stderr, scout.mesh.announce(0, 'hello').reply
	print >>sys.stderr, scout.mesh.signal.reply
	print >>sys.stderr, scout.mesh.loss.reply
    if 1:
	print >>sys.stderr, scout.misc.temperature.reply
	# this causes problems - print >>sys.stderr, scout.misc.temperature.report.reply
	print >>sys.stderr, scout.misc.randomnumber.reply
	print >>sys.stderr, scout.misc.lastreset.reply
	print >>sys.stderr, scout.misc.uptime.reply
	print >>sys.stderr, scout.misc.report.reply
	print >>sys.stderr, scout.misc.verbose(1).reply
    if 1:
        print >>sys.stderr, scout.led.blink(0, 255, 255).reply
	print >>sys.stderr, scout.led.off.reply
	for color in ['red', 'green', 'blue', 'cyan', 'purple',
		      'magenta', 'yellow', 'white']:
	    print >>sys.stderr, scout.led.display(color).reply
	    continue
        #print >>sys.stderr, scout.led.sethex("00FF00").reply
        #print >>sys.stderr, scout.led.setrgb(0, 0, 255).reply
	print >>sys.stderr, scout.led.torch().reply
	print >>sys.stderr, scout.led.on(500).reply
	print >>sys.stderr, scout.led.blink(0, 255, 255).reply
	print >>sys.stderr, scout.led.sethex("00FF00").reply
	print >>sys.stderr, scout.led.gethex.reply
	print >>sys.stderr, scout.led.setrgb(0, 0, 255).reply
	print >>sys.stderr, scout.led.isoff.reply
	print >>sys.stderr, scout.led.savetorch(255, 255, 0).reply
	print >>sys.stderr, scout.led.report.reply
    if 1:
	print >>sys.stderr, scout.pin.makeinput("d2").reply
	print >>sys.stderr, scout.pin.makeoutput("d2").reply
	print >>sys.stderr, scout.pin.disable("d2").reply
	print >>sys.stderr, scout.pin.setmode("d2", "INPUT").reply
	print >>sys.stderr, scout.pin.read("d2").reply
	print >>sys.stderr, scout.pin.write("d2", "HIGH").reply
	print >>sys.stderr, scout.pin.save("d2", "INPUT").reply
	print >>sys.stderr, scout.pin.report.digital.reply
	print >>sys.stderr, scout.pin.report.analog.reply
    if 1:
	print >>sys.stderr, scout.backpack.report.reply
	print >>sys.stderr, scout.backpack.list.reply
	print >>sys.stderr, scout.backpack.eeprom(0).reply
	#print >>sys.stderr, scout.backpack.eeprom.update.reply
	print >>sys.stderr, scout.backpack.detail(0).reply
	print >>sys.stderr, scout.backpack.resources(0).reply
    if 1:
	print >>sys.stderr, scout.scout.report.reply
	#print >>sys.stderr, scout.scout.delay(10).reply
	print >>sys.stderr, scout.scout.isleadscout.reply
	print >>sys.stderr, scout.scout.free.reply
	#print >>sys.stderr, scout.scout.daisy.reply
	#print >>sys.stderr, scout.scout.boot.reply
	#print >>sys.stderr, scout.scout.otaboot.reply
    if 1:
	#int >>sys.stderr, scout.hq.settoken("").reply
	print >>sys.stderr, scout.hq.gettoken.reply
	print >>sys.stderr, scout.hq.verbose(1).reply
	print >>sys.stderr, scout.hq._print('hello').reply
    if 1:
	print >>sys.stderr, scout.events.start.reply
	print >>sys.stderr, scout.events.stop.reply
	print >>sys.stderr, scout.events.setcycle(60, 60, 3000).reply
	print >>sys.stderr, scout.events.verbose(1).reply
    if 1:
	print >>sys.stderr, scout.key.key("poodle").reply
	print >>sys.stderr, scout.key._print(2).reply
	print >>sys.stderr, scout.key.number(10).reply
	#print >>sys.stderr, scout.key.save.reply
    if 1:
	if scout.scout.report.reply.lead:
	    print >>sys.stderr, scout.wifi.verbose(1).reply
	    print >>sys.stderr, scout.wifi.report.reply
	    print >>sys.stderr, scout.wifi.status(0).reply
	    print >>sys.stderr, scout.wifi.status(1).reply
	    print >>sys.stderr, scout.wifi.list.reply
	    #print >>sys.stderr, scout.wifi.config.reply
	    #print >>sys.stderr, scout.wifi.dhcp.reply
	    #print >>sys.stderr, scout.wifi.static.reply
	    #print >>sys.stderr, scout.wifi.reassociate.reply
	    #print >>sys.stderr, scout.wifi.disassociate.reply
	    #print >>sys.stderr, scout.wifi.command.reply
	    #print >>sys.stderr, scout.wifi.ping.reply
	    #print >>sys.stderr, scout.wifi.dnslookup.reply
	    print >>sys.stderr, scout.wifi.gettime.reply
	    #print >>sys.stderr, scout.wifi.sleep.reply
	    #print >>sys.stderr, scout.wifi.wakeup.reply

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(0)



